{
	"info": {
		"_postman_id": "bc73cc56-4e55-4dc0-94e9-4c69d548666e",
		"name": "Endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "GET Requests",
			"item": [
				{
					"name": "Stories Index",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful GET Request\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"JSON Response Validation\", function () {",
									"    var jsonData = pm.response.json();",
									"    // TODO: add more tests once we have geoloc logic and query params integrated into endpoint",
									"    pm.expect(jsonData['data']).not.to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/stories",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"stories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Story Show",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful GET Request\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"JSON Response Validation\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['data']['id']).to.eql(Number(pm.environment.get(\"story_id\")));",
									"    var attributes = jsonData['data']['attributes'];",
									"    pm.expect(attributes['latitude']).not.to.be.null;",
									"    pm.expect(attributes['longitude']).not.to.be.null;",
									"    pm.expect(attributes['message']).not.to.be.null;",
									"    pm.expect(attributes['name']).not.to.be.null;",
									"    pm.expect(attributes['title']).not.to.be.null;",
									"    pm.expect(attributes['location']).not.to.be.null;",
									"    pm.expect(attributes['created_at']).not.to.be.null;",
									"    pm.expect(attributes['updated_at']).not.to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/stories/{{story_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"stories",
								"{{story_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "POST Requests",
			"item": [
				{
					"name": "Create and Delete Valid Story",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST Request\", function () {",
									"    pm.expect(pm.response.code).to.eql(201);",
									"});",
									"",
									"pm.test(\"JSON Response Validation\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['data']['id']).not.to.be.null;",
									"    // TODO: reset 'attributes' var when we change serializer to return table columns within an 'attributes' object",
									"    var attributes = jsonData['data'];",
									"    pm.expect(attributes['latitude']).not.to.be.null;",
									"    pm.expect(attributes['longitude']).not.to.be.null;",
									"    pm.expect(attributes['message']).not.to.be.null;",
									"    pm.expect(attributes['name']).not.to.be.null;",
									"    pm.expect(attributes['title']).not.to.be.null;",
									"    pm.expect(attributes['location']).not.to.be.null;",
									"    pm.expect(attributes['created_at']).not.to.be.null;",
									"    pm.expect(attributes['updated_at']).not.to.be.null;",
									"    // DELETE the valid story that was just created:",
									"    var data = jsonData.data;",
									"    var id_to_delete = Number(data.id);",
									"    var base_url = pm.environment.get(\"base_url\");",
									"    var full_url = `${base_url}/api/v1/stories/${id_to_delete}`",
									"    console.log('calling DELETE for', full_url)",
									"    pm.sendRequest({url: full_url, method: 'DELETE'}, function (err, response) {",
									"        if (err) {",
									"            console.log(err);",
									"        }",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\":\"Wie Traurig\",\n    \"message\":\"Ich habe meinen Freund im Denver verloren und jetzt bin Ich ganz allein :(\",\n    \"name\":\"Till Lindemann\",\n    \"latitude\":125.456892,\n    \"longitude\":-18.982791\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/stories",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"stories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Error Handling for Empty JSON Body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Unsuccessful POST Request\", function () {",
									"    pm.expect(pm.response.code).to.eql(400);",
									"});",
									"",
									"pm.test(\"JSON Response Validation\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['errors']).not.to.be.null;",
									"    // Empty JSON body should produce errors for the 3 required fields (lat, long, message):",
									"    pm.expect(Object.keys(jsonData['errors']).length).to.eql(3);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/stories",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"stories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Error Handling for Story with >1k Chars",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Unsuccessful POST Request\", function () {",
									"    pm.expect(pm.response.code).to.eql(400);",
									"});",
									"",
									"pm.test(\"JSON Response Validation\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['errors']).not.to.be.null;",
									"    pm.expect(jsonData['errors']['message']).to.eql(['Ensure this field has no more than 1000 characters.']);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\":\"Here's Johnny!\",\n    \"message\":\"allworkandnoplaymakesjackadullboyallworkandnoplaymakesjackadullboyallworkandnoplaymakesjackadullboyallworkandnoplaymakesjackadullboyallworkandnoplaymakesjackadullboyallworkandnoplaymakesjackadullboyallworkandnoplaymakesjackadullboyallworkandnoplaymakesjackadullboyallworkandnoplaymakesjackadullboyallworkandnoplaymakesjackadullboyallworkandnoplaymakesjackadullboyallworkandnoplaymakesjackadullboyallworkandnoplaymakesjackadullboyallworkandnoplaymakesjackadullboyallworkandnoplaymakesjackadullboyallworkandnoplaymakesjackadullboyallworkandnoplaymakesjackadullboyallworkandnoplaymakesjackadullboyallworkandnoplaymakesjackadullboyallworkandnoplaymakesjackadullboyallworkandnoplaymakesjackadullboyallworkandnoplaymakesjackadullboyallworkandnoplaymakesjackadullboyallworkandnoplaymakesjackadullboyallworkandnoplaymakesjackadullboyallworkandnoplaymakesjackadullboyallworkandnoplaymakesjackadullboyallworkandnoplaymakesjackadullboyallworkandnoplaymakesjackadullboyallworkandnoplaymakesjackadullboyallworkandnoplaymakesjackadullboyallworkandnoplaymakesjackadullboyallworkandnoplaymakesjackadullboyallworkandnoplaymakesjackadullboy\",\n    \"name\":\"Jack Torrance\",\n    \"latitude\":125.456892,\n    \"longitude\":-18.982791\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/stories",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"stories"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}